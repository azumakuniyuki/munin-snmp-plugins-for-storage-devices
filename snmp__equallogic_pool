#!/usr/bin/perl -w
#%# family=snmpauto
#%# capabilities=snmpconf
use strict;
use warnings;
use Munin::Plugin::SNMP;
use Net::SNMP 'oid_lex_sort';

my( $PluginSess, $E ) = Munin::Plugin::SNMP->session();
die sprintf( "# Error: %s\n", $E ) if $E;

# http://cric.grenoble.cnrs.fr/Administrateurs/Outils/MIBS/?oid=1.3.6.1.4.1.12740.16.1.2.1
my $PluginVers = '0.0.1';
my $GraphValue = {
    'title'     => 'Storage Pool Statistics',
    'device'    => 'EqualLogic',
    'vlabel'    => 'MB',
    'base'      => 1024,
    'lower'     => 0,
    'upper'     => 0,
};
my $StateIndex = {
    '0' => 'unknown',
    '1' => 'normal',
    '2' => 'warning',
    '3' => 'critical',
};
my $ParentOIDv = '1.3.6.1.4.1.12740.16.1.2.1';
my $OIDEnfants = {
    'total-space'   => 1,   # eqlStoragePoolStatsSpace
    'used-space'    => 2,   # eqlStoragePoolStatsSpaceUsed
    'free-space'    => 3,   # eqlStoragePoolStatsFreeSpace
    'repl-total'    => 4,   # eqlStoragePoolStatsReplicationSpace
    'repl-used'     => 5,   # eqlStoragePoolStatsReplicationSpaceUsed
    'repl-free'     => 6,   # eqlStoragePoolStatsReplicationFreeSpace
    # 7,  # eqlStoragePoolStatsMemberNumOnline
    # 8,  # eqlStoragePoolStatsMemberCount
    # 9,  # eqlStoragePoolStatsSnapshotReserved
    # 10, # eqlStoragePoolStatsSnapshotUsed
    # 11, # eqlStoragePoolStatsSnapshotNumInUse
    # 12, # eqlStoragePoolStatsSnapshotNumOnline
    # 13, # eqlStoragePoolStatsSnapshotCount
    # 14, # eqlStoragePoolStatsVolumeNumInUse
    # 15, # eqlStoragePoolStatsVolumeNumOnline
    # 16, # eqlStoragePoolStatsVolumeCount
    # 17, # eqlStoragePoolStatsDelegatedSpace
    # 18, # eqlStoragePoolStatsDelegatedSpaceUsed
    # 19, # eqlStoragePoolStatsMembersInUse
    # 'vol-subscribed'    => 20,  # eqlStoragePoolStatsVolumeSubscribed
    # 'vol-allocagted'    => 21,  # eqlStoragePoolStatsVolumeSpaceAllocated
    # 22, # eqlStoragePoolStatsFailbackSpace
    # 23, # eqlStoragePoolStatsThinProvFreeSpace
    # 24, # eqlStoragePoolStatsConnectionCount
    # 25, # eqlStoragePoolStatsSnapshotResvFreeSpace
};
my $LabelIndex = {
    '1' => 'Total Space(MB)',
    '2' => 'Used Space(MB)',
    '3' => 'Free Space(MB)',
    '4' => 'Total Replication Space(MB)',
    '5' => 'Used Replication Space(MB)',
    '6' => 'Free Replication Space(MB)',
};
my $SNMPConfig = {
    'host'      => $ENV{'host'} || $PluginSess->hostname || '',
    'port'      => $ENV{'port'} || 161,
    'community' => $ENV{'community'} || 'dellpublic',
    'version'   => $ENV{'version'} || '2c',
};
my $LimitRatio = {
    'warning'   => 0.80,
    'critical'  => 0.95,
};

my $MetricsSet = $PluginSess->get_by_regex( $ParentOIDv, '\d+' ) || {};
die( '# Error: '.$PluginSess->error ) unless keys %$MetricsSet;

if( defined $ARGV[0] ) {
    # munin-run snmp_equallogic <some argument>
    if( $ARGV[0] eq 'snmpconf' ) {
        # munin-run snmp__equallogic snmpconf
        printf( "require %s. [1-6]\n", $ParentOIDv );

    } elsif( $ARGV[0] eq 'config' ) {
        # munin-run snmp__equallogic config
        if( $SNMPConfig->{'host'} && $SNMPConfig->{'host'} ne 'localhost' ) {
            printf( "host_name %s\n", $SNMPConfig->{'host'} );
        }
        printf( "graph_title %s %s\n", $GraphValue->{'device'}, $GraphValue->{'title'} );
        printf( "graph_args --base %d\n", $GraphValue->{'base'} ) if $GraphValue->{'base'};
        printf( "graph_vlabel %s\n", $GraphValue->{'vlabel'} );
        printf( "graph_scale no\n" );
        printf( "graph_category disk\n" );

        my $v = { 'crit' => 0, 'warn' => 0 };
        my $o = [ map { oid2text( $_ ) } oid_lex_sort( keys %$MetricsSet ) ];
        printf( "graph_order %s\n", join( ' ', @$o ) );

        for my $e ( keys %$MetricsSet ) {
            my $i = oid2text( $e );
            my $f = oid2label( $e );
            next unless $i;

            printf( "%s.label %s\n", $i, $f );
            printf( "%s.type GAUGE\n", $i );

            if( $i eq 'total-space' ) {
                # Set the value of "warning", and "critical"
                $v->{'warn'} = $MetricsSet->{ $e } * $LimitRatio->{'warning'};
                $v->{'crit'} = $MetricsSet->{ $e } * $LimitRatio->{'critical'};
            }
        }
        printf( "used-space.warning %d\n", $v->{'warn'} );
        printf( "used-space.critical %d\n", $v->{'crit'} );
        printf( "used-space.draw %s\n", 'LINE3' );
    }
    exit 0;

} else {
    # munin-run snmp__equallogic_storage
    for my $e ( keys %$MetricsSet ) {
        my $i = oid2text( $e );
        next unless $i;
        printf( "%s.value %d\n", $i, $MetricsSet->{ $e } );
    }
}

sub oid2text  {
    my $argv = shift;
    my $head = [ split '\.', $argv ]->[0];
    my $text = '';

    for my $e ( keys %$OIDEnfants ) {
        next unless $head eq $OIDEnfants->{ $e };
        $text = $e;
        last;
    }
    return $text;
}

sub oid2label {
    my $argv = shift;
    my $head = [ split '\.', $argv ]->[0];
    return $LabelIndex->{ $head } || '';
}

=head1 NAME

snmp__equallogic_pool - Munin plugin for getting pool statistics in EqualLogic
storage via SNMP.

=head1 SETUP

    # cat /etc/hosts
    192.168.0.101 eq01
    192.168.0.102 eq02

    # cd /etc/munin/plugins
    # for E in eq01 eq02; do
    > ln -s /usr/share/munin/plugins/snmp__equallogic_pool ./snmp_${E}_equallogic_pool
    > done

    # /etc/rc.d/init.d/munin-node restart

=head1 SEE ALSO

SNMP OIDs for EqualLogic
L<http://cric.grenoble.cnrs.fr/Administrateurs/Outils/MIBS/?oid=1.3.6.1.4.1.12740>

=head1 AUTHOR

Copyright (C) 2014 azumakuniyuki

=head1 LICENSE

This library is free software; you can redistribute it and/or modify it under 
the same terms as Perl itself.

=cut

