#!/usr/bin/perl -w
#%# family=snmpauto
#%# capabilities=snmpconf
use strict;
use warnings;
use Munin::Plugin::SNMP;

my( $PluginSess, $E ) = Munin::Plugin::SNMP->session();
die sprintf( "# Error: %s\n", $E ) if $E;

# http://cric.grenoble.cnrs.fr/Administrateurs/Outils/MIBS/?oid=1.3.6.1.4.1.12740.2.1.6.1
my $PluginVers = '0.0.2';
my $ParentOIDv = '1.3.6.1.4.1.12740.2.1.6.1';
my $OIDEnfants = {
    'label' => 2,   # eqlMemberHealthDetailsTemperatureName
    'value' => 3,   # eqlMemberHealthDetailsTemperatureValue
    'state' => 4,   # eqlMemberHealthDetailsTemperatureCurrentState
    'crit1' => 5,   # eqlMemberHealthDetailsTemperatureHighCriticalThreshold
    'warn1' => 6,   # eqlMemberHealthDetailsTemperatureHighWarningThreshold
    'crit0' => 7,   # eqlMemberHealthDetailsTemperatureLowCriticalThreshold
    'warn0' => 8,   # eqlMemberHealthDetailsTemperatureLowWarningThreshold
};
my $DeviceMaps = {
    # snmpwalk -v2c -cdellpublic eql1 1.3.6.1.4.1.12740.2.1.6.1.2
    # SNMPv2-SMI::enterprises.12740.2.1.6.1.2.1.*.1 = STRING: "System"
    # SNMPv2-SMI::enterprises.12740.2.1.6.1.2.1.*.2 = STRING: "Backplane sensor 0"
    # ...
    1   => 'System',
    2   => 'Backplane0',
    3   => 'Backplane1',
    4   => 'Processor0',
    5   => 'Chipset0',
    6   => 'Processor1',
    7   => 'Chipset1',
    8   => 'SAS-Controller0',
    9   => 'SAS-Expander0',
    10  => 'SES-Enclosure',
    11  => 'SAS-Controller1',
    12  => 'SAS-Expander1',
    17  => 'Battery0',
    18  => 'Battery1',
};
my $SNMPConfig = {
    'host'      => $ENV{'host'} || $PluginSess->hostname || '',
    'port'      => $ENV{'port'} || 161,
    'community' => $ENV{'community'} || 'dellpublic',
    'version'   => $ENV{'version'} || '2c',
    'device'    => 'EqualLogic',
};

my $LabelIndex = $PluginSess->get_hash(
                    '-baseoid'  => $ParentOIDv,
                    '-cols'     => {
                        $OIDEnfants->{'label'} => 'label',
                        $OIDEnfants->{'value'} => 'value',
                        $OIDEnfants->{'state'} => 'state',
                        $OIDEnfants->{'crit1'} => 'critical',
                        $OIDEnfants->{'warn1'} => 'warning',
                    }
                 ) or die( '# Error: '.$PluginSess->error );

if( defined $ARGV[0] ) {
    # munin-run snmp_equallogic <some argument>
    if( $ARGV[0] eq 'snmpconf' ) {
        # munin-run snmp__equallogic snmpconf
        printf( "require %s. [2-8]\n", $ParentOIDv );

    } elsif( $ARGV[0] eq 'config' ) {
        # munin-run snmp__equallogic config
        if( $SNMPConfig->{'host'} && $SNMPConfig->{'host'} ne 'localhost' ) {
            printf( "host_name %s\n", $SNMPConfig->{'host'} );
        }
        printf( "graph_title %s Temperatures\n", $SNMPConfig->{'device'} );
        printf( "graph_args --lower-limit 0 --upper-limit 150\n" );
        printf( "graph_vlabel degree Celsius\n" );
        printf( "graph_category sensors\n" );

        for my $e ( keys %$LabelIndex ) {
            my $i = get_id( $e );
            next unless $i;

            for my $f ( qw|label warnings1 critical1| ) {
                printf( "%s.%s %s\n", $i, $f, $LabelIndex->{ $e }->{ $f } );
            }
            printf ( "%s.type GAUGE\n", $i );
        }
    }
    exit 0;

} else {
    # munin-run snmp__equallogic_temp
    for my $e ( keys %$LabelIndex ) {
        my $i = get_id( $e );
        next unless $i;
        printf( "%s.value %d\n", $i, $LabelIndex->{ $e }->{'value'} );
    }
}

sub get_id {
    my $argv = shift;

    if( $argv =~ m/\A\d+[.]\d+[.](\d+)\z/ ) {
        $argv = $DeviceMaps->{ $1 };
    }

    # SNMPv2-SMI::enterprises.12740.2.1.6.1.2.1.*.1 = STRING: "System"
    # SNMPv2-SMI::enterprises.12740.2.1.6.1.3.1.*.1 = Gauge32: 0
    return $argv unless $argv eq 'System';
    return '';
}

=head1 NAME

snmp__equallogic_temp - Munin plugin for monitoring temperatures in EqualLogic
storage via SNMP.

=head1 SETUP

    # cat /etc/hosts
    192.168.0.101 eq01
    192.168.0.102 eq02

    # cd /etc/munin/plugins
    # for E in eq01 eq02; do
    > ln -s /usr/share/munin/plugins/snmp__equallogic_temp ./snmp_${E}_equallogic_temp
    > done

    # /etc/rc.d/init.d/munin-node restart

=head1 SEE ALSO

SNMP OIDs for EqualLogic
L<http://cric.grenoble.cnrs.fr/Administrateurs/Outils/MIBS/?oid=1.3.6.1.4.1.12740>

=head1 AUTHOR

Copyright (C) 2014 azumakuniyuki

=head1 LICENSE

This library is free software; you can redistribute it and/or modify it under 
the same terms as Perl itself.

=cut
